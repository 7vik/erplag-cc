** Test case t3.txt: Module semantics**

declare module fun1;
declare module fun2;
<<module fun3>>
takes input [d:real, s: boolean];				**The fun3 does not return value**
start
	declare q:real;
	q:= d*20.5+ q/2.0;						
end
<<<driver program>>>
start
	declare v, w, r :integer;
	declare s: boolean;
	get_value(v);
	w:=22;
	declare m:real;
	[r,m,s] := use module fun1 with parameters v, w,s, m;    	**ERROR_M: Input parameters types mismatch**
	print(r);
	[v,m] := use module mod1 with parameters v, w;    		**ERROR_M: Module mod1 not known**	
	print(m);
end
<<module mod1>>
takes input [a:integer, b:integer];
returns [x:integer, abc:real];
start
	declare c:real;
	declare t: boolean;
	c:=10.4;
	[x,c,t] := use module fun1 with parameters b, c, t;    		**ERROR_M: Input parameters numbers mismatch**
	x:=a+b-10;
end									**ERROR_M: The output parameter abc does not get assigned a value**

<<module fun1>>
takes input [a:integer, b:integer, c:real, d: boolean];
returns [result:integer, value:real, flag: boolean];
start
	declare p:real;
	result:=10.4+p;
	[a] := use module fun3 with parameters c, d;    		**ERROR_M: Output parameters numbers mismatch or improper usage of the function returning no value**	
	value:=a+b-10;
	[a,c,d] := use module fun2 with parameters b, c, d;    		**ERROR_M: Output parameters numbers mismatch**
	flag:=c*2+12.8>=10.0;
	[flag,c] := use module fun2 with parameters b, c, d;    	**ERROR_M: Output parameters types mismatch**
end

<<module fun2>>
takes input [b1:integer, c1:real, d1: boolean];
returns [result1:integer, new:real];
start
	declare q:integer;
	result1:= q-10;						** No Error: output parameter result1 assigned a value**
	value:=a+b-10;
	use module fun3 with parameters c1, d1;    			**No error : proper usage of the function returning no value**	
	d1:=c*2+12.8>=10.0;
end								**ERROR_M: The output parameter new does not get assigned a value**




