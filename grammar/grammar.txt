<program> -> <moduleDeclarations> <otherModules> <driverModule> <otherModules>
<moduleDeclarations> -> <moduleDeclaration> <moduleDeclarations> 
<moduleDeclarations> -> EPS
<moduleDeclaration> -> DECLARE MODULE ID SEMICOL
<otherModules> -> <module> <otherModules> 
<otherModules> -> EPS
<driverModule> -> DRIVERDEF DRIVER PROGRAM DRIVERENDDEF <moduleDef>
<module> -> DEF MODULE ID ENDDEF TAKES INPUT SQBO <input_plist> SQBC SEMICOL <ret> <moduleDef>
<ret> -> RETURNS SQBO <output_plist> SQBC SEMICOL 
<ret> -> EPS
<input_plist_lr> -> COMMA ID COLON <dataType> <input_plist_lr> 
<input_plist_lr> -> EPS
<input_plist> -> ID COLON <dataType> <input_plist_lr>
<output_plist_lr> -> COMMA ID COLON <type> <output_plist_lr> 
<output_plist_lr> -> EPS
<output_plist> -> ID COLON <type> <output_plist_lr>
<datatype> -> INTEGER 
<datatype> -> REAL 
<datatype> -> BOOLEAN 
<datatype> -> ARRAY SQBO <rangeArr> SQBC OF <type>
<rangeArr> -> <index> RANGEOP <index>
<type> -> INTEGER 
<type> -> REAL 
<type> -> BOOLEAN
<moduleDef> -> START <statements> END
<statements> -> <statement> <statements> 
<statements> -> EPS
<statement> -> <ioStmt> 
<statement> -> <simpleStmt> 
<statement> -> <declareStmt> 
<statement> -> <conditionalStmt> 
<statement> -> <iterativeStmt>
<ioStmt> -> GET_VALUE BO ID BC SEMICOL 
<ioStmt> -> PRINT BO <var> BC SEMICOL
<var> -> ID <whichId> 
<var> -> NUM 
<var> -> RNUM
<whichId> -> SQBO <index> SQBC 
<whichId> -> EPS
<simpleStmt> -> <assignmentStmt> 
<simpleStmt> -> <moduleReuseStmt>
<assignmentStmt> -> ID <whichStmt>
<whichStmt> -> <lvalueIDStmt> 
<whichStmt> -> <lvalueARRStmt>
<lvalueIDStmt> -> ASSIGNOP <expression> SEMICOL
<lvalueARRStmt> -> SQBO <index> SQBC ASSIGNOP <expression> SEMICOL
<index> -> NUM 
<index> -> ID
<moduleReuseStmt> -> <optional> USE MODULE ID WITH PARAMETERS <idList> SEMICOL
<optional> -> SQBO <idList> SQBC ASSIGNOP 
<optional> -> EPS
<idList_lr> -> COMMA ID <idList_lr> 
<idList_lr> -> EPS
<idList> -> ID <idList_lr> 
<expression> -> <opt_expr> <opt_expr_lr>
<opt_expr_lr> -> <logicalOp> <opt_expr> <opt_expr_lr>
<opt_expr_lr> -> EPS
<opt_expr> -> <arithmeticExpr> <one_more_opt>
<one_more_opt> -> <relationalOp> <arithmeticExpr> <one_more_opt>
<one_more_opt> -> EPS
<arithmeticExpr_lr> -> <op1> <term> <arithmeticExpr_lr> 
<arithmeticExpr_lr> -> EPS
<arithmeticExpr> -> <term> <arithmeticExpr_lr>
<term_lr> -> <op2> <factor> <term_lr> 
<term_lr> -> EPS
<term> -> <factor> <term_lr>
<factor> -> BO <arithmeticExpr> BC 
<factor> -> <var>
<factor> -> <op1> <factor>
<op> -> PLUS 
<op> -> MINUS 
<op> -> MUL 
<op> -> DIV
<op1> -> PLUS 
<op1> -> MINUS
<op2> -> MUL 
<op2> -> DIV
<logicalOp> -> AND 
<logicalOp> -> OR
<relationalOp> -> LT 
<relationalOp> -> LE 
<relationalOp> -> GT 
<relationalOp> -> GE 
<relationalOp> -> EQ 
<relationalOp> -> NE
<declareStmt> -> DECLARE <idList> COLON <dataType> SEMICOL
<value> -> NUM 
<value> -> TRUE 
<value> -> FALSE
<caseStmt> -> CASE <value> COLON <statements> BREAK SEMICOL <caseStmt> 
<caseStmt> -> CASE <value> COLON <statements> BREAK SEMICOL
<default> -> DEFAULT COLON <statements> BREAK SEMICOL 
<default> -> EPS
<conditionalStmt> -> SWITCH BO ID BC START <caseStmt> <default> END
<range> -> NUM RANGEOP NUM
<iterativeStmt> -> FOR BO ID IN <range> BC START <statements> END 
<iterativeStmt> -> WHILE BO <expression> BC START <statements> END
